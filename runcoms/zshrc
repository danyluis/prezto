#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...
[ -f ~/.alias ] && source ~/.alias
[ -f ~/.functions ] && source ~/.functions

# Smart change directory (cd)
setopt autocd
unsetopt correct
#unsetopt correct_all
cdpath=(${HOME}/code/scripts ${HOME}/code ${HOME}/tickets ${HOME})

# History management
export HISTSIZE=100000
export HISTFILESIZE=100000000
export HISTCONTROL=erasedups

# Allow zsh regex matching (=~)
setopt REMATCH_PCRE

# My local bin folder
[ ! -d "${HOME}/bin" ] && mkdir "${HOME}/bin"
export PATH="${HOME}/bin":$PATH

# Enable Fuzzy Finder
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
# This makes fzf use rg to list the files when calling it without parameters (which is faster than letting fzf search files by itself)
export FZF_DEFAULT_COMMAND='rg --files --no-ignore --hidden --follow -g "!{.git,node_modules}/*" 2> /dev/null'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

# Enable forgit
[ -f ~/own/forgit/forgit.plugin.zsh ] && source ~/own/forgit/forgit.plugin.zsh

#Enable enhancd
[ -f ~/own/enhancd/init.sh ] && export ENHANCD_DISABLE_DOT=1 && export ENHANCD_DISABLE_HOME=1 && ENHANCD_HYPHEN_NUM=20 && source ~/own/enhancd/init.sh

# Java Environment
if [ -f "${HOME}/.jenv/bin/jenv" ]
then
    export PATH="${HOME}/.jenv/bin:$PATH"
    eval "$(jenv init -)"
fi

# Python Environment
if [ -f "${HOME}/.pyenv/bin/pyenv" ]
then
    export PATH="${HOME}/.pyenv/bin:$PATH"
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
fi

# Manage Node.js versions using nvm
if [ -d "${HOME}/.nvm" ]
then
    export NVM_DIR="${HOME}/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
fi

# Add GNUPG to PATH (GNU Privacy Guard)
[ -s "/usr/local/opt/gpg" ] && export PATH=$PATH:/usr/local/opt

# Ruby version Manager
[ -d "${HOME}/.rvm/bin" ] && export PATH=$PATH:"${HOME}/.rvm/bin"

#The fuck -- command corrector
[ -f "/usr/local/bin/thefuck" ] && eval $(thefuck --alias)

#######################################################################################
############################             MAC OS            ############################
#######################################################################################
if [[ "$(uname -v)" =~ "Darwin" ]]
then
    # Iterm2 integration on MacOS
    [ -e "${HOME}/.iterm2_shell_integration.zsh" ] && source "${HOME}/.iterm2_shell_integration.zsh"

    # OPENSSL Path and Compilation Flags
    export PATH="/usr/local/opt/openssl@1.1/bin:$PATH"
    export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/opt/openssl@1.1/lib/
    export LDFLAGS="-L/usr/local/opt/openssl@1.1/lib $LDFLAGS"
    export CPPFLAGS="-I/usr/local/opt/openssl@1.1/include $CPPFLAGS"
    export PKG_CONFIG_PATH="/usr/local/opt/openssl@1.1/lib/pkgconfig:$PKG_CONFIG_PATH"

    # MYSQL Path and Compilation Flags
    # Compilation flags with mysql-client
    # export PATH="/usr/local/opt/mysql-client/bin:$PATH"
    # export LDFLAGS="-L/usr/local/opt/mysql-client/lib $LDFLAGS"
    # export CPPFLAGS="-I/usr/local/opt/mysql-client/include $CPPFLAGS"
    # export PKG_CONFIG_PATH="/usr/local/opt/mysql-client/lib/pkgconfig:$PKG_CONFIG_PATH"
    # export PYCURL_SSL_LIBRARY=openssl CFLAGS="-I/usr/local/opt/openssl/include -L/usr/local/opt/openssl/lib"

    # PIP on environments: at the moment, I'm just creating a pip.conf file in each environment folder.
    # But, if at some point a single configuration is enough, we can use this variable (PIP_INDEX_URL)
    #export PIP_INDEX_URL=https://dany.farina@glovoapp.com:AKCp5emFpvHGSweH4VTvzS5Sfa2gmxy7eDUqoaQDoUfeDx94tGMJa6PGVZ9nnS251z6eXQvqJ@artifactory.glovoint.com/artifactory/api/pypi/glovo-pypi/simple

    # MySQL client
    export PATH="/usr/local/opt/mysql-client/bin:$PATH"

    # Glovo
    export PATH="${HOME}/code/scripts:$PATH"
fi

#######################################################################################
############################             UBUNTU            ############################
#######################################################################################
if [[ "$(uname -v)" =~ "Ubuntu" ]]
then
    # Solve Ubuntu auth popup for Remote Desktop
    # FILE1='/etc/polkit-1/localauthority.conf.d/02-allow-colord.conf'
    # if [[ ! -f @{FILE1} ]]
    # then
    #     sudo echo 'polkit.addRule(function(action, subject) {
    #  if ((action.id == "org.freedesktop.color-manager.create-device" ||
    #  action.id == "org.freedesktop.color-manager.create-profile" ||
    #  action.id == "org.freedesktop.color-manager.delete-device" ||
    #  action.id == "org.freedesktop.color-manager.delete-profile" ||
    #  action.id == "org.freedesktop.color-manager.modify-device" ||
    #  action.id == "org.freedesktop.color-manager.modify-profile") &&
    #  subject.isInGroup("{users}")) {
    #  return polkit.Result.YES;
    #  }
    #  });' > ${FILE1}
    # fi
#    POLKIT_FILE='/etc/polkit-1/localauthority/50-local.d/45-allow-colord.pkla'
#    if [[ ! -f ${POLKIT_FILE} ]]
#    then
#        sudo echo '[Allow Colord all Users]
#Identity=unix-user:*
#Action=org.freedesktop.color-manager.create-device;org.freedesktop.color-manager.create-profile;org.freedesktop.color-manager.delete-device;org.freedesktop.color-manager.delete-profile;org.freedesktop.color-manager.modify-device;org.freedesktop.color-manager.modify-profile
#ResultAny=no
#ResultInactive=no
#ResultActive=yes' > ${POLKIT_FILE}#

#    sudo rm -f /var/crash/*
#    fi

    if [ -s "${HOME}/.sdkman/bin/sdkman-init.sh" ]
    then
        export SDKMAN_DIR="${HOME}/.sdkman"
        source "${HOME}/.sdkman/bin/sdkman-init.sh"
    fi
fi